#> user, server
# Type d'algorithme :
# Auteur(s)         :
# Date              :
# Version           :
# Interpreteur	   	:
# Pre-requis        :
# Fichiers lies   	:
# Commentaires 	  	:

# Copyright
# Ce programme est un logiciel libre; vous pouvez le redistribuer ou le modifier
# suivant les termes de la GNU General Public License telle que publiee par la
# Free Software Foundation; soit la version 3 de la licence, soit (a votre gre)
# toute version ulterieure.
# Ce programme est distribue dans l'espoir qu'il sera utile, mais SANS AUCUNE
# GARANTIE; sans meme la garantie tacite de QUALITE MARCHANDE ou d'ADEQUATION A
# UN BUT PARTICULIER. Consultez la GNU General Public License pour plus de
# details.
# Vous devez avoir recu une copie de la GNU General Public License en meme temps
# que ce programme; si ce n'est pas le cas, consultez
# <http://www.gnu.org/licenses>.

#> user, server, data
## VERSION ----
indic  <- ""
vIndic <- ""

## CHARGEMENT DES PACKAGES ----
dependencies <- c("dplyr")

loadDependencies <- function(dependencies) {
  suppressAll <- function(expr) {
    suppressPackageStartupMessages(suppressWarnings(expr))
  }

  lapply(dependencies,
         function(x)
         {
           suppressAll(library(x, character.only = TRUE))
         }
  )
  invisible()
}

loadDependencies(dependencies)

#> user, data
## IMPORT DES FICHIERS DE CONFIGURATION ----


## DECLARATION DES FONCTIONS ----

## Fonction permettant de faire les arrondis a l'inferieur si 0 a 4 et au superieur si 5 a 9
funArrondi <- function (x, digits = 0) {
  .local <- function(x, digits) {
    x <- x * (10^digits)
    ifelse(abs(x%%1 - 0.5) < .Machine$double.eps^0.5,
           ceiling(x)/(10^digits),
           round(x)/(10^digits))
  }

  if (is.data.frame(x))
    return(data.frame(lapply(x, .local, digits)))
  .local(x, digits)
}

## Fonction initialisant le fichier de sortie
funSortie <- function(data_entree, paramsOut, ...) {
  select(data_entree, ...) %>%
    distinct()             %>%
    (function(df) {
      df[rep(1:nrow(df), each = nrow(paramsOut)),] %>%
        as.tbl()
    })                     %>%
    mutate(CODE_PAR = rep(paramsOut$CODE_PAR,
                          n() / nrow(paramsOut)),
           LIB_PAR  = rep(paramsOut$LIB_PAR,
                          n() / nrow(paramsOut)))
}

## Fonction permettant d'ecrire le fichier de sortie
funResult 		<- function(indic, vIndic, heure_debut,
                        data_sortie, data_complementaire, complementaire,
                        file, file_complementaire)
{
    # determination du temps de calcul
    heure_fin       <- Sys.time()
    heure_dif       <- heure_fin - heure_debut
    temps_execution <- paste0(round(heure_dif, 2),
                              attr(heure_dif, "units"))

    # creation du bandeau d'information
    etiquette <- paste(indic, vIndic, Sys.Date(),
                       "Temps d'execution :", temps_execution,
                       sep = ";")

    # sortie du bandeau d'information
    cat(paste0(etiquette, "\n"), file = file, sep = "")

    # sortie du fichier de sortie
    write.table(data_sortie, row.names = FALSE, quote = FALSE, sep = ";",
                file = file, append = TRUE)

    # Sortie complementaire
    if(complementaire)
    {
        if (file == "") {
            print("Fichier")
        }

        cat(paste0(etiquette, "\n"), file = file_complementaire, sep = "")
        write.table(data_complementaire, row.names = FALSE, quote = FALSE,
                    sep = ";", file = file_complementaire, append = TRUE)
    }

}# fin de la fonction funResult

#> server, user
## INITIALISATION DU TRAITEMENT ----
# Ne pas afficher les messages d'avis
options(warn = -1)

# Recuperation du fichier d'entree
#> server
arguments      <- commandArgs(trailingOnly = TRUE)
File           <- arguments[1]
complementaire <- as.logical(arguments[2])
#> user
File           <- ""
complementaire <- FALSE

#> server, user
# Initialisation de l'heure
heure_debut <- Sys.time()

##  IMPORT DES FICHIERS ----
#> server
# Chargement du fichier .RData associe
suppressWarnings(load(paste0(indic, "_", vIndic, "_calc_fun.RData")))

#> server, user
# Import du fichier d'entree
data_entree <- read.table(File, header = TRUE, sep = "\t",
                          stringsAsFactors = FALSE, quote = "\"",
                          colClasses = c(CODE_OPERATION = "character",
                                         CODE_STATION   = "character",
                                         CODE_TAXON     = "character"))

## INITIALISATION DU FICHIER DE SORTIE ----
paramsOut <- data.frame(CODE_PAR = c(),
                        LIB_PAR  = c(),
                        stringsAsFactors = FALSE)

data_sortie <- funSortie(data_entree = data_entree,
                         paramsOut   = paramsOut,
                         CODE_OPERATION, CODE_STATION, DATE) %>%
  mutate(CODE_OPERATION = as.character(CODE_OPERATION),
         CODE_STATION   = as.character(CODE_STATION),
         DATE           = as.character(DATE))

## CALCUL DE L'INDICE ----
resultats <-

## RESULTATS COMPLEMENTAIRES ----
if (complementaire) {
  data_complementaire <- NULL
} else {
  data_complementaire <- NULL
}

## SORTIE DES RESULTATS ----

data_sortie <- left_join(x  = data_sortie,
                         y  = resultats,
                         by = c("CODE_OPERATION", "CODE_PAR"))


#> user
fichierResultat               <- paste0(indic, "_", vIndic, "_resultats.csv")
fichierResultatComplementaire <- paste0(indic, "_", vIndic,
                                        "_resultats_complementaires.csv")
#> server
fichierResultat               <- ""
fichierResultatComplementaire <- ""

#> user, server
funResult(indic               = indic,
          vIndic              = vIndic,
          heure_debut         = heure_debut,
          data_sortie         = data_sortie,
          data_complementaire = data_complementaire,
          complementaire      = complementaire,
          file                = fichierResultat,
          file_complementaire = fichierResultatComplementaire)
